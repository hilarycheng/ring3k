# nt loader
#
# Copyright 2006-2009 Mike McCormack
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
#

srcdir = @srcdir@
VPATH  = @srcdir@

XML_INCLUDES = @XML2INCL@

FREETYPEINCL = @FREETYPEINCL@
CAIROINCL = @CAIROINCL@

INCLUDE_DIRS += $(srcdir)
INCLUDE_DIRS += $(srcdir)/../include
INCLUDE_DIRS += $(srcdir)/../libudis86
INCLUDE_DIRS += ../libudis86
INCLUDE_DIRS += $(srcdir)/../include/common

CFLAGS_COMMON += $(FREETYPEINCL)
CFLAGS_COMMON += $(XML_INCLUDES)
CFLAGS_COMMON += $(CAIROINCL)
CFLAGS_COMMON += $(INCLUDE_DIRS:%=-I%)
CFLAGS_COMMON += -g -Wall -O2 -D__i386__ -fshort-wchar -fno-strict-aliasing

DEPFLAG = -Wp,-MD,.$@.d
CFLAGS = -Wpointer-arith
CPPFLAGS = $(CFLAGS_COMMON) $(DEPFLAG)

LIBS += @XML2LIBS@
LIBS += @LIBSDL@
LIBS += @FREETYPELIBS@
LIBS += @CAIROLIBS@
LIBS += ../libudis86/libudis86.a

LDFLAGS = -rdynamic

CC = @CC@
CXX = @CXX@
RM = rm -f
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
prefix = @prefix@
bindir = ${prefix}/bin

HEADERS = $(wildcard *.h)

C_SOURCES = \
	ptrace_if.c \

CPP_SOURCES = \
	alloc_bitmap.cpp \
	atom.cpp \
	bitmap.cpp \
	block.cpp \
	cairo_display.cpp \
	completion.cpp \
	debug.cpp \
	driver.cpp \
	event.cpp \
	fiber.cpp \
	file.cpp \
	job.cpp \
	kthread.cpp \
	mailslot.cpp \
	main.cpp \
	mem.cpp \
	message.cpp \
	mutant.cpp \
	namedpipe.cpp \
	ntcall.cpp \
	ntgdi.cpp \
	ntuser.cpp \
	null_display.cpp \
	objdir.cpp \
	object.cpp \
	platform.cpp \
	port.cpp \
	profile.cpp \
	process.cpp \
	ptrace_base.cpp \
	queue.cpp \
	random.cpp \
	reg.cpp \
	region.cpp \
	sdl.cpp \
	section.cpp \
	semaphore.cpp \
	skas.cpp \
	spy.cpp \
	symlink.cpp \
	syscall.cpp \
	thread.cpp \
	timer.cpp \
	token.cpp \
	tt.cpp \
	unicode.cpp

OBJECTS = $(C_SOURCES:.c=.o) $(CPP_SOURCES:.cpp=.o)

TARGET = ring3k-bin
TARGETCLIENT = ring3k-client

.PHONY: all clean stat test

all: $(TARGET) enc fiber $(TARGETCLIENT)

-include $(OBJECTS:%=$(dir %).$(notdir %).d)

$(TARGET): $(OBJECTS)
	$(CXX) $(LDFLAGS) -o $@ $(OBJECTS) $(LIBS)

$(TARGETCLIENT): client.o
	$(CC) -o $@ $^ -static -nostartfiles -nodefaultlibs -Wl,-Ttext=0xa0000000

enc: enc.c
	$(CC) -o enc -Wall $<

fiber: fiber_test.o fiber.o platform.o
	$(CXX) -o $@ $^

install: $(TARGET) $(TARGETCLIENT)
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL_PROGRAM) $(INSTALL_FLAGS) $(TARGET) $(DESTDIR)$(bindir)
	$(INSTALL_PROGRAM) $(INSTALL_FLAGS) $(TARGETCLIENT) $(DESTDIR)$(bindir)

uninstall:
	$(RM) $(DESTDIR)$(bindir)/$(TARGET)
	$(RM) $(DESTDIR)$(bindir)/$(TARGETCLIENT)

clean:
	rm -f $(TARGET) *.o core enc fiber $(TARGETCLIENT) *.orig *.rej .*.d

stat:
	@/usr/bin/perl syscall_stat.pl
	@echo -n "Total LOC:     "
	@cat $(HEADERS) $(C_SOURCE) $(CPP_SOURCES) | wc --lines

